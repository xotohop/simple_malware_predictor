import pandas as pd
import re
from warnings import simplefilter

simplefilter(action='ignore', category=pd.errors.PerformanceWarning)


def preprocess(df, i, libs=None):
    ''' 
    Takes a DataFrame, the number of its columns and list of libraries, 
    returns the processed DataFrame, to which ALL unique libraries from the 'libs' column 
    (or from the list of libraries, if received) are added as filled columns 0 and 1 
    (1 - the library is in the libs column of the corresponding row). 
    '''

    if not libs:
        libs = sorted(list(set([a for b in df['libs'].apply(lambda x: x.split(',')).tolist() for a in b])))

    df[[lib for lib in libs]] = 0
    for lib in list(df)[i:]:
        mask = (df['libs'].str.contains(re.escape(lib), na=False, case=False)) & (df[lib] == 0)
    df.loc[mask, lib] = 1
    df[[lib for lib in libs]] = 0
    for lib in list(df)[2:]:
        mask = (df['libs'].str.contains(re.escape(lib), na=False, case=False)) & (df[lib] == 0)
        df.loc[mask, lib] = 1
    return df


# For the validation data, sklearn.tree.DecisionTreeClassifier requires the same features as in the training data. 
# Therefore, when preprocessing 'val.tsv' and 'test.tsv', I added features from 'train.tsv' and marked '1' only those libraries that are in 'train.tsv'.
# Thus, the features that are absent in the 'train.tsv' remain unknown for the model.

if __name__ == '__main__':
    df_train = pd.read_csv('tsv/train.tsv', delimiter='\t')
    df_train = preprocess(df_train[['is_virus', 'libs']], 2)
    df_train.to_csv('tsv_pp/train.tsv', index=False, sep='\t')

    libs_columns = df_train.columns.tolist()[2:]
    
    df_val = pd.read_csv('tsv/val.tsv', delimiter='\t')
    df_val = preprocess(df_val[['is_virus', 'libs']], 2, libs_columns)
    df_val.to_csv('tsv_pp/val.tsv', index=False, sep='\t')

    df_test = pd.read_csv('tsv/test.tsv', delimiter='\t')
    df_test = preprocess(df_test[['libs']], 1, libs_columns)
    df_test.to_csv('tsv_pp/test.tsv', index=False, sep='\t')
